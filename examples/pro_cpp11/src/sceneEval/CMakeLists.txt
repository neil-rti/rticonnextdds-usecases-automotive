
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
PROJECT(sceneEval_app CXX)

if(DEFINED ENV{NDDSHOME})
  set(NDDSHOME $ENV{NDDSHOME})
else()
  message(FATAL_ERROR "NDDSHOME (env var) is not set")
endif()

set(CMAKE_MODULE_PATH ${NDDSHOME}/resource/cmake)

cmake_policy(SET CMP0057 NEW)
find_package(RTIConnextDDS EXACT "6.1" REQUIRED)

IF(DEFINED ENV{CONNEXTDDS_ARCH})
    SET(CONNEXTDDS_ARCH $ENV{CONNEXTDDS_ARCH})
ELSE()
    MESSAGE(FATAL_ERROR "CONNEXTDDS_ARCH (env var) is not set (this indicates the Connext build target type)")
ENDIF()

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../../build/${CONNEXTDDS_ARCH})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../../build/${CONNEXTDDS_ARCH})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../../build/${CONNEXTDDS_ARCH})

SET(TYPEFILES_BASE_DIR ../../../..)
IF (UNIX)
  SET(TYPEFILES_LIB_DEBUG_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/x64Linux4gcc7.3.0/Debug/)
  SET(TYPEFILES_LIB_RELEASE_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/x64Linux4gcc7.3.0/Release/)
  #SET(TYPEFILES_LIB_DEBUG_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/armv8Linux4gcc7.3.0/Debug/)
  #SET(TYPEFILES_LIB_RELEASE_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/armv8Linux4gcc7.3.0/Release/)
  ENDIF (UNIX)
IF (WIN32)
  SET(TYPEFILES_LIB_DEBUG_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/x64Win64VS2017/Debug/)
  SET(TYPEFILES_LIB_RELEASE_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/x64Win64VS2017/Release/)
ENDIF (WIN32)
SET(TYPEFILES_INCLUDE_DIR ${TYPEFILES_BASE_DIR}/datatypes/build/pro/generated/C++11/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${TYPEFILES_INCLUDE_DIR} ${CONNEXTDDS_INCLUDE_DIRS})
SET(SOURCE_EXTENSION cxx)

IF (${CMAKE_BUILD_TYPE} MATCHES "[Rr]elease")
    ADD_DEFINITIONS(-DNDEBUG)
    SET(AD_TYPES_LIB_PATH ${TYPEFILES_LIB_RELEASE_DIR})
ELSE()
    SET(AD_TYPES_LIB_PATH ${TYPEFILES_LIB_DEBUG_DIR})
ENDIF()
IF (UNIX)
    SET(AD_TYPES_LIBS "libC++11_pro_types_lib.a")
ENDIF (UNIX)
IF (WIN32)
    SET(AD_TYPES_LIBS "C++11_pro_types_lib")
ENDIF (WIN32)        
LINK_DIRECTORIES(${AD_TYPES_LIB_PATH})

ADD_EXECUTABLE(sceneEval
               ${CMAKE_CURRENT_SOURCE_DIR}/sceneEval_main.${SOURCE_EXTENSION}
               )
TARGET_LINK_LIBRARIES(sceneEval PUBLIC  ${AD_TYPES_LIBS} RTIConnextDDS::cpp2_api)