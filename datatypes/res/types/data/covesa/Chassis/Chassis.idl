#ifndef __CHASSIS_IDL__
#define __CHASSIS_IDL__

#include "res/types/data/covesa/base/entity.idl"

module covesa {
module Vehicle {
    module Chassis {
        struct ChassisInfo {
            // EntityIdentity has a KEY field
            covesa::base::EntityIdentity entity;
            unsigned short Wheelbase; // attribute:Overall wheel base, in mm.
            unsigned short Track; // attribute:Overall wheel tracking, in mm.
            octet AxleCount; // attribute:Number of axles on the vehicle
        };
        module Axle {
            struct Brake {
                octet FluidLevel; // sensor:Brake fluid level as percent. 0 = Empty. 100 = Full.
                boolean IsFluidLevelLow; // sensor:Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
                octet PadWear; // sensor:Brake pad wear as percent. 0 = No Wear. 100 = Worn.
                boolean IsBrakesWorn; // sensor:Brake pad wear status. True = Worn. False = Not Worn.
            };
            struct Tire {
                unsigned short Pressure; // sensor:Tire pressure in kilo-Pascal.
                boolean IsPressureLow; // sensor:Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
                float Temperature; // sensor:Tire temperature in Celsius.
            };
            struct Wheel {
                string<16> id;      // Left, Right
                float Speed;    // sensor:Rotational speed of a vehicle's wheel.
                Vehicle::Chassis::Axle::Brake Brake;    // info about brake fluid/pad
                Vehicle::Chassis::Axle::Tire Tire;      // info about tire
            };
            struct WheelRow {
                // EntityIdentity has a KEY field
                covesa::base::EntityIdentity entity;
                octet WheelCount; // attribute:Number of wheels on the axle
                float WheelDiameter; // attribute:Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
                float WheelWidth; // attribute:Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
                float TireDiameter; // attribute:Outer diameter of tires, in inches, as per ETRTO / TRA standard.
                unsigned short TireWidth; // attribute:Nominal section width of tires, in mm, as per ETRTO / TRA standard.
                octet TireAspectRatio; // attribute:Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.
                Vehicle::Chassis::Axle::Wheel Left; // Left wheel info
                Vehicle::Chassis::Axle::Wheel Right; // Right wheel info
            };
        };
        module Control {
            struct ParkingBrakeStatus {
                boolean IsEngaged; // actuator:Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.
            };
            module SteeringWheel {
                module PositionValues_M {
                    enum PositionValues{STEERING_WHEEL_POSITION_FRONT_LEFT,STEERING_WHEEL_POSITION_FRONT_RIGHT};
                };
                struct SteeringWheelStatus {
                    short Angle; // sensor:Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.
                    octet Tilt; // actuator:Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.
                    octet Extension; // actuator:Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.
                    Vehicle::Chassis::Control::SteeringWheel::PositionValues_M::PositionValues Position; // position of steering wheel in vehicle
                };
            };
            struct AcceleratorStatus {
                octet PedalPosition; // sensor:Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
            };
            struct BrakeStatus {
                octet PedalPosition; // sensor:Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
                boolean IsDriverEmergencyBrakingDetected; // sensor:Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected.
            };

            struct Status {
                // EntityIdentity has a KEY field
                covesa::base::EntityIdentity entity;
                Vehicle::Chassis::Control::ParkingBrakeStatus ParkingBrake;
                Vehicle::Chassis::Control::SteeringWheel::SteeringWheelStatus SteeringWheel;
                Vehicle::Chassis::Control::AcceleratorStatus Accelerator;
                Vehicle::Chassis::Control::BrakeStatus Brake;
            };
        };
    };
};
};
#endif  // __CHASSIS_IDL__